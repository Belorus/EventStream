<#@ template debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Assembly Name="System.Windows.Forms" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="EventStreaming" #>
<#@ import namespace="EventStreaming.Configuration" #>
using System.Collections.Generic;
using System.Linq;
using System;
using EventStreaming;

namespace <#=_namespace#>
{
    public class AmbientContext : IAmbientContext
    {
        private readonly Dictionary<string, object> _dynamicValues = new Dictionary<string, object>();
        private readonly Dictionary<string, Func<object>> _evaluatedValues = new Dictionary<string, Func<object>>();

		public IEnumerable<KeyValuePair<string, object>> GetAmbientData()
		{
		    return Enumerable.Union(
		        _dynamicValues,
		        _evaluatedValues.Select(kv => new KeyValuePair<string, object>(kv.Key, kv.Value()))
		        );
		}
<# foreach(var field in _ambientFieldDefinitions.Values.OfType<DynamicFieldDefinition>()) { #>
        public void Set<#=field.Name.ToPascalCase()#>(<#=field.Type.ToString().ToLowerCamelCase()#> <#=field.Name.ToLowerCamelCase()#>)
        {
            _dynamicValues["<#=field.Name#>"] = <#=field.Name.ToLowerCamelCase()#>;
        }

        public void Clear<#=field.Name.ToPascalCase()#>()
        {
            _dynamicValues.Remove("<#=field.Name#>"); 
        }
<# } #>
<# foreach(var field in _ambientFieldDefinitions.Values.OfType<EvaluatedFieldDefinition>()) { #>
        public void Set<#=field.Name.ToPascalCase()#>Func(Func<<#=field.Type.ToString().ToLowerCamelCase()#>> <#=field.Name.ToLowerCamelCase()#>)
        {
            _evaluatedValues["<#=field.Name#>"] = () => <#=field.Name.ToLowerCamelCase()#>();
        }

        public void Clear<#=field.Name.ToPascalCase()#>Func()
        {
            _evaluatedValues.Remove("<#=field.Name#>"); 
        }
<# } #>
    }

    public static partial class <#=_className#>
    {
<# foreach(var @event in _events) { #>
        public static Event <#=@event.Name#>(<#=string.Join(", ", @event.Fields.Values.OfType<DynamicFieldDefinition>().Select(f => f.Type.ToString().ToLowerCamelCase() + " " + f.Name.ToLowerCamelCase()))#>)
        {
            var e = new Event("<#=@event.Name#>",
			new[]
            {
<#          foreach(var field in @event.Fields.Values.OfType<DynamicFieldDefinition>()) {#>
                new KeyValuePair<string, object>("<#=field.Name#>", <#=field.Name.ToLowerCamelCase()#>),
<#          }#>
<#          foreach(var field in @event.Fields.Values.OfType<StaticFieldDefinition>()) {#>
                new KeyValuePair<string, object>("<#=field.Name#>", "<#=field.Value#>"),
<#          }#>
            });
            return e;
		}
<#          }#>
    }
}