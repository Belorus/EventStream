// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Text;
using EventStreaming.Configuration;
using Microsoft.VisualStudio.TextTemplating;

namespace EventStream.Generator
{
    /// <summary>
    ///     Class to produce the template output
    /// </summary>
#line 1 "C:\IrfanView\bingo.cs\Src\Playtika\EventStreaming\EventStream.Codegen\EventsGenerator.tt" [GeneratedCode("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class EventsGenerator : EventsGeneratorBase
    {
        /// <summary>
        ///     The current host for the text templating engine
        /// </summary>
        public virtual ITextTemplatingEngineHost Host { get; set; }

        /// <summary>
        ///     Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            Write("\n");
            Write("\n");
            Write("\n");
            Write("\n");
            Write("\n");
            Write("\n");
            Write("\n");
            Write("\n");
            Write("\n");
            Write("\n");
            Write("\nusing System.Collections.Generic;\nusing System.Linq;\nusing System;\nusing EventSt" +
                  "reaming;\n\nnamespace ");

#line 1 "C:\IrfanView\bingo.cs\Src\Playtika\EventStreaming\EventStream.Codegen\EventsGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(_namespace));

#line default
#line hidden
            Write("\n{\n    public class AmbientContext : IAmbientContext\n    {\n        private readon" +
                  "ly Dictionary<string, object> _dynamicValues = new Dictionary<string, object>(");

#line 1 "C:\IrfanView\bingo.cs\Src\Playtika\EventStreaming\EventStream.Codegen\EventsGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(_ambientFieldDefinitions.Values
                .OfType<DynamicFieldDefinition>().Count()));

#line default
#line hidden
            Write(");\n        private readonly Dictionary<string, Func<object>> _evaluatedValues = n" +
                  "ew Dictionary<string, Func<object>>(");

#line 1 "C:\IrfanView\bingo.cs\Src\Playtika\EventStreaming\EventStream.Codegen\EventsGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(_ambientFieldDefinitions.Values
                .OfType<EvaluatedFieldDefinition>().Count()));

#line default
#line hidden
            Write(@");

        public int UserSeed { get; set; }

        public object GetValue(string key)
        {
            if (_dynamicValues.TryGetValue(key, out var value))
            {
                return value;
            }
            else
            {
                if (_evaluatedValues.TryGetValue(key, out var func))
                {
                    return func();
                }
                else
                {
                    return null;
                }
            }
        }

");

#line 1 "C:\IrfanView\bingo.cs\Src\Playtika\EventStreaming\EventStream.Codegen\EventsGenerator.tt"
            foreach (var field in _ambientFieldDefinitions.Values.OfType<DynamicFieldDefinition>())
            {
#line default
#line hidden
                Write("\n        public void Set");

#line 1 "C:\IrfanView\bingo.cs\Src\Playtika\EventStreaming\EventStream.Codegen\EventsGenerator.tt"
                Write(ToStringHelper.ToStringWithCulture(field.Name.ToPascalCase()));

#line default
#line hidden
                Write("(");

#line 1 "C:\IrfanView\bingo.cs\Src\Playtika\EventStreaming\EventStream.Codegen\EventsGenerator.tt"
                Write(ToStringHelper.ToStringWithCulture(field.Type.ToString().ToLowerCamelCase()));

#line default
#line hidden
                Write(" ");

#line 1 "C:\IrfanView\bingo.cs\Src\Playtika\EventStreaming\EventStream.Codegen\EventsGenerator.tt"
                Write(ToStringHelper.ToStringWithCulture(field.Name.ToLowerCamelCase()));

#line default
#line hidden
                Write(")\n        {\n            _dynamicValues[\"");

#line 1 "C:\IrfanView\bingo.cs\Src\Playtika\EventStreaming\EventStream.Codegen\EventsGenerator.tt"
                Write(ToStringHelper.ToStringWithCulture(field.Name));

#line default
#line hidden
                Write("\"] = ");

#line 1 "C:\IrfanView\bingo.cs\Src\Playtika\EventStreaming\EventStream.Codegen\EventsGenerator.tt"
                Write(ToStringHelper.ToStringWithCulture(field.Name.ToLowerCamelCase()));

#line default
#line hidden
                Write(";\n        }\n\n        public void Clear");

#line 1 "C:\IrfanView\bingo.cs\Src\Playtika\EventStreaming\EventStream.Codegen\EventsGenerator.tt"
                Write(ToStringHelper.ToStringWithCulture(field.Name.ToPascalCase()));

#line default
#line hidden
                Write("()\n        {\n            _dynamicValues.Remove(\"");

#line 1 "C:\IrfanView\bingo.cs\Src\Playtika\EventStreaming\EventStream.Codegen\EventsGenerator.tt"
                Write(ToStringHelper.ToStringWithCulture(field.Name));

#line default
#line hidden
                Write("\"); \n        }\n");

#line 1 "C:\IrfanView\bingo.cs\Src\Playtika\EventStreaming\EventStream.Codegen\EventsGenerator.tt"
            }

#line default
#line hidden
            Write("\n");

#line 1 "C:\IrfanView\bingo.cs\Src\Playtika\EventStreaming\EventStream.Codegen\EventsGenerator.tt"
            foreach (var field in _ambientFieldDefinitions.Values.OfType<EvaluatedFieldDefinition>())
            {
#line default
#line hidden
                Write("\n        public void Set");

#line 1 "C:\IrfanView\bingo.cs\Src\Playtika\EventStreaming\EventStream.Codegen\EventsGenerator.tt"
                Write(ToStringHelper.ToStringWithCulture(field.Name.ToPascalCase()));

#line default
#line hidden
                Write("Func(Func<");

#line 1 "C:\IrfanView\bingo.cs\Src\Playtika\EventStreaming\EventStream.Codegen\EventsGenerator.tt"
                Write(ToStringHelper.ToStringWithCulture(field.Type.ToString().ToLowerCamelCase()));

#line default
#line hidden
                Write("> ");

#line 1 "C:\IrfanView\bingo.cs\Src\Playtika\EventStreaming\EventStream.Codegen\EventsGenerator.tt"
                Write(ToStringHelper.ToStringWithCulture(field.Name.ToLowerCamelCase()));

#line default
#line hidden
                Write(")\n        {\n            _evaluatedValues[\"");

#line 1 "C:\IrfanView\bingo.cs\Src\Playtika\EventStreaming\EventStream.Codegen\EventsGenerator.tt"
                Write(ToStringHelper.ToStringWithCulture(field.Name));

#line default
#line hidden
                Write("\"] = () => ");

#line 1 "C:\IrfanView\bingo.cs\Src\Playtika\EventStreaming\EventStream.Codegen\EventsGenerator.tt"
                Write(ToStringHelper.ToStringWithCulture(field.Name.ToLowerCamelCase()));

#line default
#line hidden
                Write("();\n        }\n\n        public void Clear");

#line 1 "C:\IrfanView\bingo.cs\Src\Playtika\EventStreaming\EventStream.Codegen\EventsGenerator.tt"
                Write(ToStringHelper.ToStringWithCulture(field.Name.ToPascalCase()));

#line default
#line hidden
                Write("Func()\n        {\n            _evaluatedValues.Remove(\"");

#line 1 "C:\IrfanView\bingo.cs\Src\Playtika\EventStreaming\EventStream.Codegen\EventsGenerator.tt"
                Write(ToStringHelper.ToStringWithCulture(field.Name));

#line default
#line hidden
                Write("\"); \n        }\n");

#line 1 "C:\IrfanView\bingo.cs\Src\Playtika\EventStreaming\EventStream.Codegen\EventsGenerator.tt"
            }

#line default
#line hidden
            Write("\n    }\n\n    public static partial class ");

#line 1 "C:\IrfanView\bingo.cs\Src\Playtika\EventStreaming\EventStream.Codegen\EventsGenerator.tt"
            Write(ToStringHelper.ToStringWithCulture(_className));

#line default
#line hidden
            Write("\n    {\n        private static readonly KeyValuePair<string, object>[] EmptyArray " +
                  "= new KeyValuePair<string, object>[0];\n\n");

#line 1 "C:\IrfanView\bingo.cs\Src\Playtika\EventStreaming\EventStream.Codegen\EventsGenerator.tt"
            foreach (var @event in _events)
            {
#line default
#line hidden
                Write("\n        public static Event ");

#line 1 "C:\IrfanView\bingo.cs\Src\Playtika\EventStreaming\EventStream.Codegen\EventsGenerator.tt"
                Write(ToStringHelper.ToStringWithCulture(@event.Name));

#line default
#line hidden
                Write("(");

#line 1 "C:\IrfanView\bingo.cs\Src\Playtika\EventStreaming\EventStream.Codegen\EventsGenerator.tt"
                Write(ToStringHelper.ToStringWithCulture(string.Join(", ",
                    @event.Fields.Values.OfType<DynamicFieldDefinition>().Select(f =>
                        f.Type.ToString().ToLowerCamelCase() + " " + f.Name.ToLowerCamelCase()))));

#line default
#line hidden
                Write(")\n        { ");

#line 1 "C:\IrfanView\bingo.cs\Src\Playtika\EventStreaming\EventStream.Codegen\EventsGenerator.tt"
                if (@event.Fields.Values.OfType<DynamicFieldDefinition>().Any())
                {
#line default
#line hidden
                    Write(" \n            return new Event(\"");

#line 1 "C:\IrfanView\bingo.cs\Src\Playtika\EventStreaming\EventStream.Codegen\EventsGenerator.tt"
                    Write(ToStringHelper.ToStringWithCulture(@event.Name));

#line default
#line hidden
                    Write("\",\n                new []\n                { ");

#line 1 "C:\IrfanView\bingo.cs\Src\Playtika\EventStreaming\EventStream.Codegen\EventsGenerator.tt"
                    foreach (var field in @event.Fields.Values.OfType<DynamicFieldDefinition>())
                    {
#line default
#line hidden
                        Write("\n                    new KeyValuePair<string, object>(\"");

#line 1 "C:\IrfanView\bingo.cs\Src\Playtika\EventStreaming\EventStream.Codegen\EventsGenerator.tt"
                        Write(ToStringHelper.ToStringWithCulture(field.Name));

#line default
#line hidden
                        Write("\", ");

#line 1 "C:\IrfanView\bingo.cs\Src\Playtika\EventStreaming\EventStream.Codegen\EventsGenerator.tt"
                        Write(ToStringHelper.ToStringWithCulture(field.Name.ToLowerCamelCase()));

#line default
#line hidden
                        Write("), ");

#line 1 "C:\IrfanView\bingo.cs\Src\Playtika\EventStreaming\EventStream.Codegen\EventsGenerator.tt"
                    }

#line default
#line hidden
                    Write("\n                }); ");

#line 1 "C:\IrfanView\bingo.cs\Src\Playtika\EventStreaming\EventStream.Codegen\EventsGenerator.tt"
                }
                else
                {
#line default
#line hidden
                    Write(" \n            return new Event(\"");

#line 1 "C:\IrfanView\bingo.cs\Src\Playtika\EventStreaming\EventStream.Codegen\EventsGenerator.tt"
                    Write(ToStringHelper.ToStringWithCulture(@event.Name));

#line default
#line hidden
                    Write("\", EmptyArray); ");

#line 1 "C:\IrfanView\bingo.cs\Src\Playtika\EventStreaming\EventStream.Codegen\EventsGenerator.tt"
                }

#line default
#line hidden
                Write("\n        } \n        ");

#line 1 "C:\IrfanView\bingo.cs\Src\Playtika\EventStreaming\EventStream.Codegen\EventsGenerator.tt"
            }

#line default
#line hidden
            Write("\n    }\n}");
            return GenerationEnvironment.ToString();
        }
    }

#line default
#line hidden

    #region Base class

    /// <summary>
    ///     Base class for this transformation
    /// </summary>
    [GeneratedCode("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class EventsGeneratorBase
    {
        #region Fields

        private StringBuilder generationEnvironmentField;
        private CompilerErrorCollection errorsField;
        private List<int> indentLengthsField;
        private bool endsWithNewline;

        #endregion

        #region Properties

        /// <summary>
        ///     The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected StringBuilder GenerationEnvironment
        {
            get
            {
                if (generationEnvironmentField == null)
                    generationEnvironmentField = new StringBuilder();
                return generationEnvironmentField;
            }
            set => generationEnvironmentField = value;
        }

        /// <summary>
        ///     The error collection for the generation process
        /// </summary>
        public CompilerErrorCollection Errors
        {
            get
            {
                if (errorsField == null)
                    errorsField = new CompilerErrorCollection();
                return errorsField;
            }
        }

        /// <summary>
        ///     A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private List<int> indentLengths
        {
            get
            {
                if (indentLengthsField == null)
                    indentLengthsField = new List<int>();
                return indentLengthsField;
            }
        }

        /// <summary>
        ///     Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent { get; private set; } = "";

        /// <summary>
        ///     Current transformation session
        /// </summary>
        public virtual IDictionary<string, object> Session { get; set; }

        #endregion

        #region Transform-time helpers

        /// <summary>
        ///     Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
                return;
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (GenerationEnvironment.Length == 0
                || endsWithNewline)
            {
                GenerationEnvironment.Append(CurrentIndent);
                endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(Environment.NewLine,
                StringComparison.CurrentCulture))
                endsWithNewline = true;
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if (CurrentIndent.Length == 0)
            {
                GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(Environment.NewLine,
                Environment.NewLine + CurrentIndent);
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (endsWithNewline)
                GenerationEnvironment.Append(textToAppend, 0,
                    textToAppend.Length - CurrentIndent.Length);
            else
                GenerationEnvironment.Append(textToAppend);
        }

        /// <summary>
        ///     Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            Write(textToAppend);
            GenerationEnvironment.AppendLine();
            endsWithNewline = true;
        }

        /// <summary>
        ///     Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            Write(string.Format(CultureInfo.CurrentCulture, format, args));
        }

        /// <summary>
        ///     Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            WriteLine(string.Format(CultureInfo.CurrentCulture, format, args));
        }

        /// <summary>
        ///     Raise an error
        /// </summary>
        public void Error(string message)
        {
            var error = new CompilerError();
            error.ErrorText = message;
            Errors.Add(error);
        }

        /// <summary>
        ///     Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            var error = new CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            Errors.Add(error);
        }

        /// <summary>
        ///     Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if (indent == null)
                throw new ArgumentNullException("indent");
            CurrentIndent = CurrentIndent + indent;
            indentLengths.Add(indent.Length);
        }

        /// <summary>
        ///     Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            var returnValue = "";
            if (indentLengths.Count > 0)
            {
                var indentLength = indentLengths[indentLengths.Count - 1];
                indentLengths.RemoveAt(indentLengths.Count - 1);
                if (indentLength > 0)
                {
                    returnValue = CurrentIndent.Substring(CurrentIndent.Length - indentLength);
                    CurrentIndent =
                        CurrentIndent.Remove(CurrentIndent.Length - indentLength);
                }
            }
            return returnValue;
        }

        /// <summary>
        ///     Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            indentLengths.Clear();
            CurrentIndent = "";
        }

        #endregion

        #region ToString Helpers

        /// <summary>
        ///     Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private IFormatProvider formatProviderField =
                CultureInfo.InvariantCulture;

            /// <summary>
            ///     Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public IFormatProvider FormatProvider
            {
                get => formatProviderField;
                set
                {
                    if (value != null)
                        formatProviderField = value;
                }
            }

            /// <summary>
            ///     This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if (objectToConvert == null)
                    throw new ArgumentNullException("objectToConvert");
                var t = objectToConvert.GetType();
                var method = t.GetMethod("ToString", new[]
                {
                    typeof(IFormatProvider)
                });
                if (method == null)
                    return objectToConvert.ToString();
                return (string) method.Invoke(objectToConvert, new object[]
                {
                    formatProviderField
                });
            }
        }

        /// <summary>
        ///     Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper { get; } = new ToStringInstanceHelper();

        #endregion
    }

    #endregion
}